{"version":3,"sources":["load-svg-file.js"],"names":["loadSvgFile","url","options","urlType","lastIndexOf","length","xhr","XMLHttpRequest","onload","document","createElement","div","class","elementClass","hide","hideElement","scripts","getElementsByTagName","script","parentNode","insertBefore","open"],"mappings":";AAAA,aAuBA,SAASA,YAAaC,EAAKC,GAA3B,IAAAC,SAAAF,EAGE,IAAKA,GAAmB,WAAZE,EAAZ,MAAI,IAAQA,MAAR,4CAA8BA,EAA9B,MAIJF,EAAAG,YAAA,UAAAH,EAAAI,OAAA,IACAJ,GAAQG,QAIR,IAAME,EAAM,IAAIC,eAEhBD,EAAIE,OAAS,WAAbF,IAAIE,EAAJC,SAAaC,cAAY,OACvBC,EAAIA,UAAMF,KAASC,aAGnBR,IAAAA,EAAA,kBAAAA,EAAUA,GAAW,IAArBU,MAAAV,EAAAU,MAAA,GAGIC,IAAJF,EAAIE,UAAcA,IAI0B,kBAAjBX,EAAQY,MAAqBZ,EAAQY,QAEhEH,EAAII,MAAAA,QAAa,QAIjB,IAAMC,EAAUP,SAASQ,qBAAqB,UAAxCD,EAAUP,EAASQ,EAAAA,OAAAA,GAGzBC,EAAOC,WAAWC,aAAaT,EAAKO,IAGtCZ,EAAIe,KAAK,MAAOpB,GAAK,GAArBK,EAAIe","file":"../src/load-svg-file.min.js","sourcesContent":["'use strict'\n\n/**\n * @typedef {Object} optionsObject\n *\n * @property {string}  [class='']  - The class of the script tag, in which the content of the SVG file will be loaded.\n * @property {boolean} [hide=true] - Hide the script tag to prevent showing the content of the loaded SVG file.\n */\n\n/**\n * Loads an SVG file using XHR and embeds its content into the DOM.\n *\n * @function loadSvgFile\n *\n * @param {string}        url       - The URL of the SVG file to load. The .svg extension can be omitted.\n * @param {optionsObject} [options] - The options of the SVG file loader.\n *\n * @example Loading an SVG\n * loadSvgFile('images/icons.svg')\n *\n * @example Loading an SVG, omitting the extension\n * loadSvgFile('images/icons')\n */\nfunction loadSvgFile (url, options) {\n  const urlType = typeof url\n\n  if (!url || urlType !== 'string') {\n    throw new Error(`The url must be a non-empty string, got:\"${urlType}\".`)\n  }\n\n  // check if the url has the .svg extension, otherwise append to it automatically\n  if (url.lastIndexOf('.svg') !== url.length - 4) {\n    url += '.svg'\n  }\n\n  const xhr = new XMLHttpRequest()\n\n  xhr.onload = function () {\n    let div = document.createElement('div')\n    div.innerHTML = this.responseText\n\n    options = options || {}\n    const elementClass = typeof options.class === 'boolean' ? options.class : ''\n\n    if (elementClass) {\n      div.className = elementClass\n    }\n\n    const hideElement = typeof options.hide === 'boolean' ? options.hide : true\n\n    if (hideElement) {\n      div.style.display = 'none'\n    }\n\n    const scripts = document.getElementsByTagName('script')\n    const script = scripts[scripts.length - 1]\n\n    script.parentNode.insertBefore(div, script)\n  }\n\n  xhr.open('get', url, true)\n  xhr.send()\n}\n"]}