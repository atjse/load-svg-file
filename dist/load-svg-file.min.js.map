{"version":3,"sources":["load-svg-file.js"],"names":["loadSvgFile","url","optionsOrCallback","callback","type","Error","lastIndexOf","length","options","promise","resolve","Promise","res","rej","xhr","XMLHttpRequest","onloadend","status","element","document","createElement","innerHTML","response","elementClass","class","className","hide","style","display","body","appendChild","error","reject","send"],"mappings":";AAAA,aAuEA,SAASA,YAAaC,EAAKC,EAAmBC,GAA9C,IAAAC,SAAAH,EAGE,IAAKA,GAAgB,WAATG,EAGV,MAHFA,EAAYA,WAARA,EAAJA,EAAI,SAA2BA,EAGvB,IAAIC,MAAJ,6CAAuDD,EAAvD,MAGRH,EAAAK,YAAA,UAAAL,EAAAM,OAAA,IACAN,GAAQK,QAIR,IAAIE,EAAUN,GAAqB,GAEnCE,SAAcF,EAEVA,GAA8B,WAATE,EAAzBI,EAAIN,EACQA,aAAVM,IADFA,EAEWJ,GACTI,EAAUN,GAMZ,IAAIO,OAAAA,EAAAA,OAAAA,EACAC,OAAAA,EAGJ,oBAAAC,UACAF,EAAUE,IAAAA,QAAY,SAAAC,EAAAC,GACpBJ,EAAUG,EACRF,EAAAA,KAOJ,IAAMI,EAAM,IAAIC,eA2CjB,OAzCCD,EAAIE,UAAJF,EAAIE,QACFF,WACE,GAAmB,MAAfA,EAAIG,OAAgB,CACtB,IAAMC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAYP,EAAIQ,SAExB,IAAMC,EAAwC,iBAAlBf,EAAQgB,MAAqBhB,EAAQgB,MAAjE,GAEA,EAAID,EAAahB,SACfW,EAAQO,UAAYF,IAGsB,kBAAjBf,EAAPkB,MAAoClB,EAApCkB,QAGlBR,EAAQS,MAAMC,QAAU,QAG1BT,SAASU,KAAKC,YAAYZ,GAEtBf,EACFA,IACSM,GACTC,QAIIqB,CAAN,IAAMA,EAAQ,IAAI1B,MAAJ,0BAAoCJ,EAApC,MAGZE,EADFA,EAEWM,GACFsB,GACRC,EAAAD,KAKPjB,EAAImB,KAAK,MAAThC,GAAA,GAAAa,EAAImB,KAAK,MAGVxB,GAAA","file":"../src/load-svg-file.min.js","sourcesContent":["'use strict'\n\n/**\n * The options of the SVG content loading function.\n *\n * @typedef {Object} optionsType\n *\n * @property {string}  [class='']  - The class of the script tag, in which the content of the SVG file will be loaded.\n * @property {boolean} [hide=true] - Hide the script tag to prevent showing the content of the loaded SVG file.\n */\n\n/**\n * The SVG content loading callback.\n *\n * @callback callbackType\n *\n * @param {Object} error - The error, that caused the failure.\n */\n\n/**\n * Loads an SVG file using XHR and embeds its content into the DOM.\n *\n * @function loadSvgFile\n *\n * @param {string}                   url                 - The URL of the SVG file to load.\n *                                                         The .svg extension can be omitted.\n * @param {optionsType|callbackType} [optionsOrCallback] - The options of the SVG file loader or the callback.\n * @param {callback}                 [callback]          - The result callback\n *\n * @returns {Promise|null} Promise if supported and not turned off, otherwise null.\n *\n * @example Loading an SVG file.\n * loadSvgFile('images/icons.svg')\n *\n * @example Loading an SVG file with options.\n * loadSvgFile('images/icons.svg', {\n *  class: 'custom-class', // custom class on the container element\n *  hide: false            // don't hide the container element\n * })\n *\n * @example Loading an SVG file with callback.\n * loadSvgFile('images/icons.svg', function (error) {\n *  if (error) {\n *    throw error\n *  }\n *  console.log('SVG Loaded successfully')\n * })\n *\n * @example Loading an SVG file with options and callback.\n * loadSvgFile(\n *   'images/icons.svg',\n *   {\n *     class: 'custom-class', // custom class on the container element\n *     hide: false            // don't hide the container element\n *   },\n *   function (error) {\n *     if (error) {\n *       throw error\n *     }\n *     console.log('SVG Loaded successfully')\n *   }\n * )\n *\n * @example Loading an SVG file using promises.\n * loadSvgFile('images/icons.svg')\n *   .then(() => console.log('SVG Loaded successfully'))\n *   .catch(error => console.log(error))\n *\n * @example Loading an SVG file, omitting the extension.\n * loadSvgFile('images/icons')\n */\nfunction loadSvgFile (url, optionsOrCallback, callback) {\n  let type = typeof url\n\n  if (!url || type !== 'string') {\n    type = type !== 'string' ? type : `empty ${type}`\n\n    throw new Error(`The url must be a non-empty string, got: \"${type}\".`)\n  }\n\n  // check if the url has the .svg extension, otherwise append to it automatically\n  if (url.lastIndexOf('.svg') !== url.length - 4) {\n    url += '.svg'\n  }\n\n  let options = optionsOrCallback || {}\n\n  type = typeof optionsOrCallback\n\n  if (optionsOrCallback && type === 'object') {\n    options = optionsOrCallback\n  } else if (type === 'function') {\n    options = {}\n    callback = optionsOrCallback\n  }\n\n  //const usePromise = typeof options.usePromise === 'boolean' ? options.usePromise : true\n\n  let promise\n  let resolve\n  let reject\n\n  //if(usePromise && typeof Promise !== \"undefined\"){\n  if(typeof Promise !== \"undefined\"){\n    promise = new Promise((res, rej) => {\n      resolve = res\n      reject = rej\n    })\n  }\n\n  //console.log('usePromise', usePromise, Promise)\n\n  const xhr = new XMLHttpRequest()\n\n  xhr.onloadend =\n    xhr.onerror = () => {\n      if (xhr.status === 200) {\n        const element = document.createElement('div')\n        element.innerHTML = xhr.response\n\n        const elementClass = typeof options.class === 'string' ? options.class : ''\n\n        if (elementClass.length > 0) {\n          element.className = elementClass\n        }\n\n        const hideElement = typeof options.hide === 'boolean' ? options.hide : true\n\n        if (hideElement) {\n          element.style.display = 'none'\n        }\n\n        document.body.appendChild(element)\n\n        if (callback) {\n          callback()\n        } else if (promise) {\n          resolve()\n        }\n\n      } else {\n        const error = new Error(`Cannot load SVG file: \"${url}\".`)\n\n        if (callback) {\n          callback(error)\n        } else if (promise) {\n          reject(error)\n        }\n      }\n    }\n\n  xhr.open('get', url, true)\n  xhr.send(null)\n\n  return promise || null\n}\n"]}