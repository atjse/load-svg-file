{"version":3,"sources":["load-svg-file.umd.js"],"names":["root","factory","define","amd","module","exports","loadSvgFile","self","xhr","url","options","urlType","lastIndexOf","length","XMLHttpRequest","onload","document","div","innerHTML","this","responseText","createElement","class","elementClass","hide","hideElement","display","getElementsByTagName","script","scripts","parentNode","send"],"mappings":";cACC,SAAUA,EAAMC,GADjB,mBAAAC,QAAAA,OAAAC,IACCD,OAAUF,GAAVC,GACuB,iBAAlBG,QAAgCF,OAAYG,QAC9CH,OAAOG,QAAIJ,IAEXG,EAAAA,YAAiBH,IAJpB,CAMQK,oBAAAA,KAALC,UAAAP,EAAA,WAgEFQ,OAtCF,SAAsBC,EAAKC,GACzB,IAAMC,SAAiBF,EADzB,IAAAA,GAAA,WAASH,EACP,MAAMK,IAAAA,MAAAA,4CAANA,EAAMA,MAILF,EAAAG,YAAA,UAAAH,EAAAI,OAAA,IAICJ,GAAO,QAAPA,IAAAA,EAAO,IAAAK,eAKTN,EAAIO,OAAS,WAFb,IAAMP,EAAMQ,SAAIF,cAAhB,OAIEG,EAAIC,UAAYC,KAAKC,aAArBH,IAAIC,EAAJ,kBADAR,EAAIO,GAAeI,IACnBC,MAAAZ,EAAAY,MAAA,GAEAZ,IACAO,EAAMM,UAAAA,IAGJ,kBAAgBA,EAAhBC,MAAAd,EAAAc,QAGFP,EAAMQ,MAAAA,QAAc,QAGlBR,IAAAA,EAAUS,SAAUC,qBAApB,UACDC,EAAAC,EAAAA,EAAAhB,OAAA,GAEDe,EAAMC,WAAUb,aAASW,EAAAA,IAGzBC,EAAAA,KAAAA,MAAOE,GAAP,GACDtB,EArBDuB","file":"../tmpl/load-svg-file.umd.min.js","sourcesContent":["// UMD - returnExports.js - https://github.com/umdjs/umd/blob/master/templates/returnExports.js\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory()\n  } else {\n    root.loadSvgFile = factory()\n  }\n}(typeof self !== 'undefined' ? self : this, function () {\n  'use strict'\n\n/**\n * @typedef {Object} optionsObject\n *\n * @property {string}  [class='']  - The class of the script tag, in which the content of the SVG file will be loaded.\n * @property {boolean} [hide=true] - Hide the script tag to prevent showing the content of the loaded SVG file.\n */\n\n/**\n * Loads an SVG file using XHR and embeds its content into the DOM.\n *\n * @function loadSvgFile\n *\n * @param {string}        url       - The URL of the SVG file to load. The .svg extension can be omitted.\n * @param {optionsObject} [options] - The options of the SVG file loader.\n *\n * @example Loading an SVG\n * loadSvgFile('images/icons.svg')\n *\n * @example Loading an SVG, omitting the extension\n * loadSvgFile('images/icons')\n */\nfunction loadSvgFile (url, options) {\n  const urlType = typeof url\n\n  if (!url || urlType !== 'string') {\n    throw new Error(`The url must be a non-empty string, got:\"${urlType}\".`)\n  }\n\n  // check if the url has the .svg extension, otherwise append to it automatically\n  if (url.lastIndexOf('.svg') !== url.length - 4) {\n    url += '.svg'\n  }\n\n  const xhr = new XMLHttpRequest()\n\n  xhr.onload = function () {\n    let div = document.createElement('div')\n    div.innerHTML = this.responseText\n\n    options = options || {}\n    const elementClass = typeof options.class === 'boolean' ? options.class : ''\n\n    if (elementClass) {\n      div.className = elementClass\n    }\n\n    const hideElement = typeof options.hide === 'boolean' ? options.hide : true\n\n    if (hideElement) {\n      div.style.display = 'none'\n    }\n\n    const scripts = document.getElementsByTagName('script')\n    const script = scripts[scripts.length - 1]\n\n    script.parentNode.insertBefore(div, script)\n  }\n\n  xhr.open('get', url, true)\n  xhr.send()\n}\n\n  return loadSvgFile\n}))\n"]}